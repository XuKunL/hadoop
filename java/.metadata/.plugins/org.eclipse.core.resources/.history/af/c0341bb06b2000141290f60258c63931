/**
 * 
 */
package org.zkpk.hadoopday0808;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.zkpk.hadoopday0808.Sum_zuoye1.Mapped;
import org.zkpk.hadoopday0808.Sum_zuoye1.Reduced;

/**
 * @author Administrator
 *
 */
public class Xian_zuoye1 {

	static class Mapped extends Mapper<Object,Text,Text,Text>{

		@Override
		protected void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			String arr[]=value.toString().split("\t",-1);
			String keyw="ÏÉ½£ÆæÏÀ´«";
			Text uid=new Text();
			Text reco=new Text();
			if(arr.length==6){
				if(arr[2].indexOf(keyw)!=-1){
					uid.set(arr[2]);
					reco.set(value.toString());
					context.write(uid, reco);
				}
			}
		}
		
	}
	static class Reduced extends Reducer<Text,Text,Text,IntWritable>{
		int sum1=0;
		Text uid=new Text();
		IntWritable cishu=new IntWritable();
		@Override
		protected void reduce(Text key, Iterable<Text> values,
				Context context)
				throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			for(Text value:values){
				sum1++;
			}
			if(sum1>3){
				uid.set(key);
				cishu.set(sum1);
			}
		}

		@Override
		public void run(Context context)
				throws IOException, InterruptedException {
			super.run(context);
			context.write(uid, cishu);
		}
		
	}
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		if(args.length!=2){
			throw new Exception ("you bu gou 2 ge");
		}
		Job job=new Job(new Configuration(),"Keyword");
		job.setJarByClass(Sum_zuoye1.class);
		job.setMapperClass(Mapped.class);
		job.setReducerClass(Reduced.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		Path inputPath1=new Path(args[0]);
		Path outputPath1=new Path(args[1]);
		FileInputFormat.setInputPaths(job, inputPath1);
		FileOutputFormat.setOutputPath(job, outputPath1);
		System.exit(job.waitForCompletion(true)? 0:1);
		
		

	}

}
